{"version":3,"file":"step.js","sourceRoot":"","sources":["../src/step.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\n\nconst CommonStepZ = z.object({\n  /**\n   * Unique identifier for the step.\n   *\n   * @example\n   * id: step1\n   */\n  id: z\n    .string()\n    .optional()\n    .describe(\n      `ID of the step. Useful for later referencing the job's outputs. Example: step with id \"setup\" and an output \"platform\" will expose its value under \"steps.setup.outputs.platform\".`\n    ),\n  /**\n   * Expression that determines whether the step should run.\n   * Based on the GitHub Actions job step `if` field (https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsif).\n   */\n  if: z.string().optional().describe('Expression that determines whether the step should run.'),\n  /**\n   * The name of the step.\n   *\n   * @example\n   * name: 'Step 1'\n   */\n  name: z.string().optional().describe('Name of the step.'),\n  /**\n   * The working directory to run the step in.\n   *\n   * @example\n   * working_directory: ./my-working-directory\n   *\n   * @default depends on the project settings\n   */\n  working_directory: z\n    .string()\n    .optional()\n    .describe(\n      `Working directory to run the step in. Relative paths like \"./assets\" or \"assets\" are resolved from the app's base directory. Absolute paths like \"/apps/mobile\" are resolved from the repository root.`\n    ),\n  /**\n   * Env variables override for the step.\n   *\n   * @example\n   * env:\n   *   MY_ENV_VAR: my-value\n   *   ANOTHER_ENV_VAR: another-value\n   */\n  env: z\n    .record(z.string())\n    .optional()\n    .describe('Additional environment variables to set for the step.'),\n});\n\nexport const FunctionStepZ = CommonStepZ.extend({\n  /**\n   * The custom EAS function to run as a step.\n   * It can be a function provided by EAS or a custom function defined by the user.\n   *\n   * @example\n   * uses: eas/build\n   *\n   * @example\n   * uses: my-custom-function\n   */\n  uses: z\n    .string()\n    .describe(\n      'Name of the function to use for this step. See https://docs.expo.dev/custom-builds/schema/#built-in-eas-functions for available functions.'\n    ),\n  /**\n   * The arguments to pass to the function.\n   *\n   * @example\n   * with:\n   *   arg1: value1\n   *   arg2: ['ala', 'ma', 'kota']\n   *   arg3:\n   *     key1: value1\n   *     key2:\n   *      - value1\n   *   arg4: ${{ steps.step1.outputs.test }}\n   */\n  with: z.record(z.unknown()).optional().describe('Inputs to the function.'),\n\n  run: z.never().optional(),\n  shell: z.never().optional(),\n  outputs: z.never().optional(),\n});\n\nexport type FunctionStep = z.infer<typeof FunctionStepZ>;\n\nexport const ShellStepZ = CommonStepZ.extend({\n  /**\n   * The command-line programs to run as a step.\n   *\n   * @example\n   * run: echo Hello, world!\n   *\n   * @example\n   * run: |\n   *  npm install\n   *  npx expo prebuild\n   *  pod install\n   */\n  run: z.string().describe('Shell script to run in the step.'),\n  /**\n   * The shell to run the \"run\" command with.\n   *\n   * @example\n   * shell: 'sh'\n   *\n   * @default 'bash'\n   */\n  shell: z.string().optional().describe('Shell to run the \"run\" command with.'),\n  /**\n   * The outputs of the step.\n   *\n   * @example\n   * outputs:\n   *  - name: my_output\n   *    required: true\n   *  - name: my_optional_output\n   *    required: false\n   *  - name: my_optional_output_without_required\n   */\n  outputs: z\n    .array(\n      z.union([\n        // We allow a shorthand for outputs\n        z.string().transform((name) => ({ name, required: false })),\n        z.object({\n          name: z.string(),\n          required: z.boolean().optional(),\n        }),\n      ])\n    )\n    .optional(),\n\n  uses: z.never().optional(),\n  with: z.never().optional(),\n});\n\nexport type ShellStep = z.infer<typeof ShellStepZ>;\n\nexport const StepZ = z.union([ShellStepZ, FunctionStepZ]);\n\n/**\n * Structure of a custom EAS job step.\n *\n * GHA step fields skipped here:\n * - `with.entrypoint`\n * - `continue-on-error`\n * - `timeout-minutes`\n *\n * * @example\n * steps:\n *  - uses: eas/maestro-test\n *    id: step1\n *    name: Step 1\n *    with:\n *      flow_path: |\n *        maestro/sign_in.yaml\n *        maestro/create_post.yaml\n *        maestro/sign_out.yaml\n *  - run: echo Hello, world!\n */\nexport type Step = z.infer<typeof StepZ>;\n\nexport function validateSteps(maybeSteps: unknown): Step[] {\n  const steps = z.array(StepZ).min(1).parse(maybeSteps);\n  return steps;\n}\n\nexport function isStepShellStep(step: Step): step is ShellStep {\n  return step.run !== undefined;\n}\n\nexport function isStepFunctionStep(step: Step): step is FunctionStep {\n  return step.uses !== undefined;\n}\n"]}