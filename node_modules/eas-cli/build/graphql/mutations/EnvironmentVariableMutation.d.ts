import { ExpoGraphqlClient } from '../../commandUtils/context/contextUtils/createGraphqlClient';
import { EnvironmentSecretType, EnvironmentVariableEnvironment, EnvironmentVariableFragment, EnvironmentVariableVisibility } from '../generated';
type CreateVariableArgs = {
    value: string;
    name: string;
    visibility: EnvironmentVariableVisibility;
    environments: EnvironmentVariableEnvironment[];
    type: EnvironmentSecretType;
    isGlobal?: boolean;
    fileName?: string;
};
export type EnvironmentVariablePushInput = {
    name: string;
    value: string;
    environments: EnvironmentVariableEnvironment[];
    visibility: EnvironmentVariableVisibility;
    overwrite?: boolean;
};
export declare const EnvironmentVariableMutation: {
    linkSharedEnvironmentVariableAsync(graphqlClient: ExpoGraphqlClient, environmentVariableId: string, appId: string, environment?: EnvironmentVariableEnvironment): Promise<EnvironmentVariableFragment>;
    unlinkSharedEnvironmentVariableAsync(graphqlClient: ExpoGraphqlClient, environmentVariableId: string, appId: string, environment?: EnvironmentVariableEnvironment): Promise<EnvironmentVariableFragment>;
    createSharedVariableAsync(graphqlClient: ExpoGraphqlClient, input: CreateVariableArgs, accountId: string): Promise<EnvironmentVariableFragment>;
    createForAppAsync(graphqlClient: ExpoGraphqlClient, input: CreateVariableArgs, appId: string): Promise<EnvironmentVariableFragment>;
    updateAsync(graphqlClient: ExpoGraphqlClient, input: Partial<CreateVariableArgs> & {
        id: string;
    }): Promise<EnvironmentVariableFragment>;
    deleteAsync(graphqlClient: ExpoGraphqlClient, id: string): Promise<{
        id: string;
    }>;
    createBulkEnvironmentVariablesForAppAsync(graphqlClient: ExpoGraphqlClient, input: EnvironmentVariablePushInput[], appId: string): Promise<boolean>;
};
export {};
