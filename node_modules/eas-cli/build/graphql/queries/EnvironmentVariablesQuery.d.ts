import { ExpoGraphqlClient } from '../../commandUtils/context/contextUtils/createGraphqlClient';
import { EnvironmentVariableEnvironment, EnvironmentVariableFragment } from '../generated';
type EnvironmentVariableWithLinkedEnvironments = EnvironmentVariableFragment & {
    linkedEnvironments?: EnvironmentVariableEnvironment[] | null;
};
export type EnvironmentVariableWithFileContent = EnvironmentVariableFragment & {
    valueWithFileContent?: string | null | undefined;
};
export declare const EnvironmentVariablesQuery: {
    byAppIdWithSensitiveAsync(graphqlClient: ExpoGraphqlClient, { appId, environment, filterNames, includeFileContent, }: {
        appId: string;
        environment?: EnvironmentVariableEnvironment | undefined;
        filterNames?: string[] | undefined;
        includeFileContent?: boolean | undefined;
    }): Promise<EnvironmentVariableWithFileContent[]>;
    byAppIdAsync(graphqlClient: ExpoGraphqlClient, { appId, environment, filterNames, includeFileContent, }: {
        appId: string;
        environment?: EnvironmentVariableEnvironment | undefined;
        filterNames?: string[] | undefined;
        includeFileContent?: boolean | undefined;
    }): Promise<(EnvironmentVariableWithFileContent & EnvironmentVariableWithLinkedEnvironments)[]>;
    sharedAsync(graphqlClient: ExpoGraphqlClient, { appId, filterNames, environment, includeFileContent, }: {
        appId: string;
        filterNames?: string[] | undefined;
        environment?: EnvironmentVariableEnvironment | undefined;
        includeFileContent?: boolean | undefined;
    }): Promise<(EnvironmentVariableWithFileContent & EnvironmentVariableWithLinkedEnvironments)[]>;
    sharedWithSensitiveAsync(graphqlClient: ExpoGraphqlClient, { appId, filterNames, environment, includeFileContent, }: {
        appId: string;
        filterNames?: string[] | undefined;
        environment?: EnvironmentVariableEnvironment | undefined;
        includeFileContent?: boolean | undefined;
    }): Promise<EnvironmentVariableWithFileContent[]>;
};
export {};
