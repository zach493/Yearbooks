"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const eas_json_1 = require("@expo/eas-json");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const configure_1 = require("../../build/configure");
const evaluateConfigWithEnvVarsAsync_1 = require("../../build/evaluateConfigWithEnvVarsAsync");
const runBuildAndSubmit_1 = require("../../build/runBuildAndSubmit");
const repository_1 = require("../../build/utils/repository");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const cli_1 = require("../../fingerprint/cli");
const generated_1 = require("../../graphql/generated");
const BuildQuery_1 = require("../../graphql/queries/BuildQuery");
const AppPlatform_1 = require("../../graphql/types/AppPlatform");
const log_1 = tslib_1.__importDefault(require("../../log"));
const platform_1 = require("../../platform");
const workflow_1 = require("../../project/workflow");
const prompts_1 = require("../../prompts");
const expoCli_1 = require("../../utils/expoCli");
const profiles_1 = require("../../utils/profiles");
const DEFAULT_EAS_BUILD_RUN_PROFILE_NAME = 'development-simulator';
class BuildDev extends EasCommand_1.default {
    static hidden;
    static description = 'run dev client simulator/emulator build with matching fingerprint or create a new one';
    static flags = {
        platform: core_1.Flags.enum({
            char: 'p',
            options: [eas_build_job_1.Platform.IOS, eas_build_job_1.Platform.ANDROID],
        }),
        profile: core_1.Flags.string({
            char: 'e',
            description: `Name of the build profile from eas.json. It must be a profile allowing to create emulator/simulator internal distribution dev client builds. The "${DEFAULT_EAS_BUILD_RUN_PROFILE_NAME}" build profile will be selected by default.`,
            helpValue: 'PROFILE_NAME',
        }),
    };
    static contextDefinition = {
        ...this.ContextOptions.LoggedIn,
        ...this.ContextOptions.DynamicProjectConfig,
        ...this.ContextOptions.ProjectDir,
        ...this.ContextOptions.Vcs,
        ...this.ContextOptions.Analytics,
        ...this.ContextOptions.ProjectId,
    };
    async runAsync() {
        const { flags } = await this.parse(BuildDev);
        const { loggedIn: { actor, graphqlClient }, getDynamicPrivateProjectConfigAsync, projectDir, analytics, vcsClient, projectId, } = await this.getContextAsync(BuildDev, {
            nonInteractive: false,
            withServerSideEnvironment: null,
        });
        const platform = await this.selectPlatformAsync(flags.platform);
        if (process.platform !== 'darwin' && platform === eas_build_job_1.Platform.IOS) {
            core_1.Errors.error('Running iOS builds in simulator is only supported on macOS.', { exit: 1 });
        }
        await vcsClient.ensureRepoExistsAsync();
        await (0, repository_1.ensureRepoIsCleanAsync)(vcsClient, flags.nonInteractive);
        await (0, configure_1.ensureProjectConfiguredAsync)({
            projectDir,
            nonInteractive: false,
            vcsClient,
        });
        const buildProfile = await this.ensureValidBuildRunProfileExistsAsync({
            projectDir,
            platform,
            selectedBuildProfileName: flags.profile,
            vcsClient,
        });
        const workflow = await (0, workflow_1.resolveWorkflowAsync)(projectDir, platform, vcsClient);
        const { env } = await (0, evaluateConfigWithEnvVarsAsync_1.evaluateConfigWithEnvVarsAsync)({
            buildProfile: buildProfile.profile,
            buildProfileName: buildProfile.profileName,
            graphqlClient,
            getProjectConfig: getDynamicPrivateProjectConfigAsync,
            opts: { env: buildProfile.profile.env },
        });
        const fingerprint = await (0, cli_1.createFingerprintAsync)(projectDir, {
            env,
            workflow,
            platforms: [platform],
        });
        if (!fingerprint) {
            core_1.Errors.error('Failed to calculate fingerprint', { exit: 1 });
        }
        log_1.default.log(`âœ¨ Calculated fingerprint hash: ${fingerprint.hash}`);
        log_1.default.newLine();
        const builds = await this.getBuildsAsync({
            graphqlClient,
            projectId,
            platform,
            fingerprint,
        });
        if (builds.length !== 0) {
            const build = builds[0];
            log_1.default.succeed(`ðŸŽ¯ Found successful build with matching fingerprint on EAS servers. Running it...`);
            if (build.artifacts?.applicationArchiveUrl) {
                await (0, runBuildAndSubmit_1.downloadAndRunAsync)(build);
                await this.startDevServerAsync({ projectDir, platform });
                return;
            }
            else {
                log_1.default.warn('Artifacts for this build expired. New build will be started.');
            }
        }
        log_1.default.log('ðŸš€ No successful build with matching fingerprint found. Starting a new build...');
        const previousBuildsForSelectedProfile = await this.getBuildsAsync({
            graphqlClient,
            projectId,
            platform,
        });
        if (previousBuildsForSelectedProfile.length > 0 &&
            previousBuildsForSelectedProfile[0].metrics?.buildDuration) {
            log_1.default.log(`ðŸ•’ Previous build for "${buildProfile.profileName}" profile completed in ${Math.floor(previousBuildsForSelectedProfile[0].metrics.buildDuration / 60000)} minutes.`);
        }
        await (0, runBuildAndSubmit_1.runBuildAndSubmitAsync)({
            graphqlClient,
            analytics,
            vcsClient,
            projectDir,
            flags: {
                requestedPlatform: platform === eas_build_job_1.Platform.ANDROID ? platform_1.RequestedPlatform.Android : platform_1.RequestedPlatform.Ios,
                nonInteractive: false,
                freezeCredentials: false,
                wait: true,
                clearCache: false,
                json: false,
                autoSubmit: false,
                localBuildOptions: {},
                repack: false,
                profile: flags.profile ?? DEFAULT_EAS_BUILD_RUN_PROFILE_NAME,
            },
            actor,
            getDynamicPrivateProjectConfigAsync,
            downloadSimBuildAutoConfirm: true,
            envOverride: env,
        });
        await this.startDevServerAsync({ projectDir, platform });
    }
    async selectPlatformAsync(platform) {
        if (platform) {
            return platform;
        }
        const { resolvedPlatform } = await (0, prompts_1.promptAsync)({
            type: 'select',
            message: 'Select platform',
            name: 'resolvedPlatform',
            choices: [
                { title: 'Android', value: eas_build_job_1.Platform.ANDROID },
                { title: 'iOS', value: eas_build_job_1.Platform.IOS },
            ],
        });
        return resolvedPlatform;
    }
    async validateBuildRunProfileAsync({ platform, buildProfile, buildProfileName, }) {
        if (buildProfile.developmentClient !== true) {
            core_1.Errors.error(`Profile "${buildProfileName}" must specify "developmentClient: true" to create a dev client build. Select a different profile or update the profile in eas.json.`, { exit: 1 });
        }
        if (buildProfile.distribution !== 'internal') {
            core_1.Errors.error(`Profile "${buildProfileName}" must specify "distribution: internal" in order to work with eas build:dev command. Select a different profile or update the profile in eas.json.`, { exit: 1 });
        }
        if (platform === eas_build_job_1.Platform.IOS) {
            const iosProfile = buildProfile;
            if (iosProfile.simulator !== true && iosProfile.withoutCredentials !== true) {
                core_1.Errors.error(`Profile "${buildProfileName}" must specify "ios.simulator: true" or "withoutCredentials: true" to create an iOS simulator build. Select a different profile or update the profile in eas.json.`, { exit: 1 });
            }
        }
        else {
            const androidProfile = buildProfile;
            if (androidProfile.distribution !== 'internal' &&
                androidProfile.withoutCredentials !== true) {
                core_1.Errors.error(`Profile "${buildProfileName}" must specify "distribution: internal" or "withoutCredentials: true" to create an Android emulator build. Select a different profile or update the profile in eas.json.`, { exit: 1 });
            }
        }
    }
    async ensureValidBuildRunProfileExistsAsync({ projectDir, platform, selectedBuildProfileName, vcsClient, }) {
        if (!!selectedBuildProfileName ||
            (await (0, configure_1.doesBuildProfileExistAsync)({
                projectDir,
                profileName: DEFAULT_EAS_BUILD_RUN_PROFILE_NAME,
            }))) {
            const easJsonAccessor = eas_json_1.EasJsonAccessor.fromProjectPath(projectDir);
            const [buildProfile] = await (0, profiles_1.getProfilesAsync)({
                type: 'build',
                easJsonAccessor,
                platforms: [platform],
                profileName: selectedBuildProfileName ?? DEFAULT_EAS_BUILD_RUN_PROFILE_NAME,
                projectDir,
            });
            await this.validateBuildRunProfileAsync({
                buildProfileName: selectedBuildProfileName ?? DEFAULT_EAS_BUILD_RUN_PROFILE_NAME,
                platform,
                buildProfile: buildProfile.profile,
            });
        }
        else {
            const createBuildProfile = await (0, prompts_1.confirmAsync)({
                message: `We want to go ahead and generate "${DEFAULT_EAS_BUILD_RUN_PROFILE_NAME}" build profile for you, that matches eas build:dev criteria. Do you want to proceed?`,
            });
            if (!createBuildProfile) {
                core_1.Errors.error('Come back later or specify different build compliant with eas build:dev requirements by using "--profile" flag.', { exit: 1 });
            }
            await (0, configure_1.createBuildProfileAsync)({
                projectDir,
                profileName: DEFAULT_EAS_BUILD_RUN_PROFILE_NAME,
                profileContents: {
                    developmentClient: true,
                    distribution: 'internal',
                    ios: {
                        simulator: true,
                    },
                    environment: 'development',
                },
                nonInteractive: false,
                vcsClient,
            });
        }
        const easJsonAccessor = eas_json_1.EasJsonAccessor.fromProjectPath(projectDir);
        const [buildProfile] = await (0, profiles_1.getProfilesAsync)({
            type: 'build',
            easJsonAccessor,
            platforms: [platform],
            profileName: selectedBuildProfileName ?? DEFAULT_EAS_BUILD_RUN_PROFILE_NAME,
            projectDir,
        });
        return buildProfile;
    }
    async getBuildsAsync({ graphqlClient, projectId, platform, fingerprint, }) {
        return await BuildQuery_1.BuildQuery.viewBuildsOnAppAsync(graphqlClient, {
            appId: projectId,
            filter: {
                platform: (0, AppPlatform_1.toAppPlatform)(platform),
                fingerprintHash: fingerprint?.hash,
                status: generated_1.BuildStatus.Finished,
                simulator: platform === eas_build_job_1.Platform.IOS ? true : undefined,
                distribution: platform === eas_build_job_1.Platform.ANDROID ? generated_1.DistributionType.Internal : undefined,
                developmentClient: true,
            },
            offset: 0,
            limit: 1,
        });
    }
    async startDevServerAsync({ projectDir, platform, }) {
        log_1.default.newLine();
        log_1.default.log(`Starting development server: ${chalk_1.default.dim(`npx expo start --dev-client ${platform === eas_build_job_1.Platform.IOS ? '--ios' : '--android'}`)}`);
        await (0, expoCli_1.expoCommandAsync)(projectDir, [
            'start',
            '--dev-client',
            platform === eas_build_job_1.Platform.IOS ? '--ios' : '--android',
        ]);
    }
}
exports.default = BuildDev;
